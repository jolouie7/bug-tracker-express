generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(uuid())
  firstName        String
  lastName         String
  email            String       @unique
  password         String
  role             Role         @default(USER)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  assignedTickets  Ticket[]     @relation("AssignedTickets")
  submittedTickets Ticket[]     @relation("SubmittedTickets")
  comments         Comment[]
  attachments      Attachment[]
}

model Project {
  id                 String   @id @default(uuid())
  projectName        String
  projectDescription String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tickets            Ticket[]
}

model Ticket {
  id                  String         @id @default(uuid())
  ticketTitle         String
  ticketDescription   String
  assignedDeveloperId String
  assignedDeveloper   User           @relation("AssignedTickets", fields: [assignedDeveloperId], references: [id])
  submittedById       String
  submittedBy         User           @relation("SubmittedTickets", fields: [submittedById], references: [id])
  projectId           String
  project             Project        @relation(fields: [projectId], references: [id])
  ticketPriority      TicketPriority @default(NONE)
  ticketStatus        TicketStatus   @default(OPEN)
  ticketType          TicketType     @default(BUG)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  comments            Comment[]
  histories           History[]
  attachments         Attachment[]
}

model Comment {
  id                 String   @id @default(uuid())
  commentDescription String
  commenterId        String
  commenter          User     @relation(fields: [commenterId], references: [id])
  ticketId           String
  ticket             Ticket   @relation(fields: [ticketId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model History {
  id             String   @id @default(uuid())
  ticketProperty String
  oldValue       String
  newValue       String
  dateChanged    DateTime @default(now())
  ticketId       String
  ticket         Ticket   @relation(fields: [ticketId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Attachment {
  id                    String   @id @default(uuid())
  file                  String
  uploaderId            String
  uploader              User     @relation(fields: [uploaderId], references: [id])
  ticketId              String
  ticket                Ticket   @relation(fields: [ticketId], references: [id])
  attachmentDescription String
  createdAt             DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  SUBMITTER
}

enum TicketPriority {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ADDITIONAL_INFO_REQUIRED
  CLOSED
}

enum TicketType {
  BUG
  FEATURE_REQUEST
  ENHANCEMENT
  TRAINING_DOCUMENT_REQUEST
}
